const b = [
    
    -3.74076788*Math.pow(10, -2),
    -5.42711395*Math.pow(10, -3),
    2.96063461*Math.pow(10, -2),
    -5.59466344*Math.pow(10, -2),
    6.30845354*Math.pow(10, -2),
    -2.47230490*Math.pow(10, -2),
    -9.96993267*Math.pow(10, -2),
    5.95044626*Math.pow(10, -1),
    5.95044626*Math.pow(10, -1),
    -9.96993267*Math.pow(10, -2),
    -2.47230490*Math.pow(10, -2),
    6.30845354*Math.pow(10, -2),
    -5.59466344*Math.pow(10, -2),
    2.96063461*Math.pow(10, -2),
    -5.42711395*Math.pow(10, -3),
    -3.74076788*Math.pow(10, -2) 
    
];
const fn = [0.005, 0.006, 0.007, 0.008, 0.009, 0.010, 0.011, 0.012, 0.013, 0.014, 0.015, 0.016, 0.017, 0.018, 0.019, 0.020, 0.021, 0.022, 0.023, 0.024, 0.025, 0.026, 0.027, 0.028, 0.029, 0.030, 0.031, 0.032, 0.033, 0.034, 0.035, 0.036, 0.037, 0.038, 0.039, 0.040, 0.041, 0.042, 0.043, 0.044, 0.045, 0.046, 0.047, 0.048, 0.049, 0.050, 0.051, 0.052, 0.053, 0.054, 0.055, 0.056, 0.057, 0.058, 0.059, 0.060, 0.061, 0.062, 0.063, 0.064, 0.065, 0.066, 0.067, 0.068, 0.069, 0.070, 0.071, 0.072, 0.073, 0.074, 0.075, 0.076, 0.077, 0.078, 0.079, 0.080, 0.081, 0.082, 0.083, 0.084, 0.085, 0.086, 0.087, 0.088, 0.089, 0.090, 0.091, 0.092, 0.093, 0.094, 0.095, 0.096, 0.097, 0.098, 0.099, 0.100, 0.101, 0.102, 0.103, 0.104, 0.105, 0.106, 0.107, 0.108, 0.109, 0.110, 0.111, 0.112, 0.113, 0.114, 0.115, 0.116, 0.117, 0.118, 0.119, 0.120, 0.121, 0.122, 0.123, 0.124, 0.125, 0.126, 0.127, 0.128, 0.129, 0.130, 0.131, 0.132, 0.133, 0.134, 0.135, 0.136, 0.137, 0.138, 0.139, 0.140, 0.141, 0.142, 0.143, 0.144, 0.145, 0.146, 0.147, 0.148, 0.149, 0.150, 0.151, 0.152, 0.153, 0.154, 0.155, 0.156, 0.157, 0.158, 0.159, 0.160, 0.161, 0.162, 0.163, 0.164, 0.165, 0.166, 0.167, 0.168, 0.169, 0.170, 0.171, 0.172, 0.173, 0.174, 0.175, 0.176, 0.177, 0.178, 0.179, 0.180, 0.181, 0.182, 0.183, 0.184, 0.185, 0.186, 0.187, 0.188, 0.189, 0.190, 0.191, 0.192, 0.193, 0.194, 0.195, 0.196, 0.197, 0.198, 0.199, 0.200, 0.201, 0.202, 0.203, 0.204, 0.205, 0.206, 0.207, 0.208, 0.209, 0.210, 0.211, 0.212, 0.213, 0.214, 0.215, 0.216, 0.217, 0.218, 0.219, 0.220, 0.221, 0.222, 0.223, 0.224, 0.225, 0.226, 0.227, 0.228, 0.229, 0.230, 0.231, 0.232, 0.233, 0.234, 0.235, 0.236, 0.237, 0.238, 0.239, 0.240, 0.241, 0.242, 0.243, 0.244, 0.245, 0.246, 0.247, 0.248, 0.249, 0.250, 0.251, 0.252, 0.253, 0.254, 0.255, 0.256, 0.257, 0.258, 0.259, 0.260, 0.261, 0.262, 0.263, 0.264, 0.265, 0.266, 0.267, 0.268, 0.269, 0.270, 0.271, 0.272, 0.273, 0.274, 0.275, 0.276, 0.277, 0.278, 0.279, 0.280, 0.281, 0.282, 0.283, 0.284, 0.285, 0.286, 0.287, 0.288, 0.289, 0.290, 0.291, 0.292, 0.293, 0.294, 0.295, 0.296, 0.297, 0.298, 0.299, 0.300, 0.301, 0.302, 0.303, 0.304, 0.305, 0.306, 0.307, 0.308, 0.309, 0.310, 0.311, 0.312, 0.313, 0.314, 0.315, 0.316, 0.317, 0.318, 0.319, 0.320, 0.321, 0.322, 0.323, 0.324, 0.325, 0.326, 0.327, 0.328, 0.329, 0.330, 0.331, 0.332, 0.333, 0.334, 0.335, 0.336, 0.337, 0.338, 0.339, 0.340, 0.341, 0.342, 0.343, 0.344, 0.345, 0.346, 0.347, 0.348, 0.349, 0.350, 0.351, 0.352, 0.353, 0.354, 0.355, 0.356, 0.357, 0.358, 0.359, 0.360, 0.361, 0.362, 0.363, 0.364, 0.365, 0.366, 0.367, 0.368, 0.369, 0.370, 0.371, 0.372, 0.373, 0.374, 0.375, 0.376, 0.377, 0.378, 0.379, 0.380, 0.381, 0.382, 0.383, 0.384, 0.385, 0.386, 0.387, 0.388, 0.389, 0.390, 0.391, 0.392, 0.393, 0.394, 0.395, 0.396, 0.397, 0.398, 0.399, 0.400, 0.401, 0.402, 0.403, 0.404, 0.405, 0.406, 0.407, 0.408, 0.409, 0.410, 0.411, 0.412, 0.413, 0.414, 0.415, 0.416, 0.417, 0.418, 0.419, 0.420, 0.421, 0.422, 0.423, 0.424, 0.425, 0.426, 0.427, 0.428, 0.429, 0.430, 0.431, 0.432, 0.433, 0.434, 0.435, 0.436, 0.437, 0.438, 0.439, 0.440, 0.441, 0.442, 0.443, 0.444, 0.445, 0.446, 0.447, 0.448, 0.449, 0.450, 0.451, 0.452, 0.453, 0.454, 0.455, 0.456, 0.457, 0.458, 0.459, 0.460, 0.461, 0.462, 0.463, 0.464, 0.465, 0.466, 0.467, 0.468, 0.469, 0.470, 0.471, 0.472, 0.473, 0.474, 0.475, 0.476, 0.477, 0.478, 0.479, 0.480, 0.481, 0.482, 0.483, 0.484, 0.485, 0.486, 0.487, 0.488, 0.489, 0.490, 0.491, 0.492, 0.493, 0.494, 0.495, 0.496, 0.497, 0.498, 0.499, 0.500]

document.getElementsByTagName("p")[0].innerHTML=b;



class AFC {
    constructor(b) {
        this.b = b;
        this.fn = fn;
    }

    
    A_Fn () {
        let A = [];
        this.fn.forEach((item, i) => {
            let side_1 = this.calc_elem(Math.cos, item);
            let side_2 = this.calc_elem(Math.sin, item);

            A[i] = this.calc_A(side_1, side_2)

        })
        return A;
        
    }

    calc_elem (calculate, item) {
        const iter = 16;
        let side = 0;
        for (let i = 0; i< iter; i++) {
            side += this.b[i] * calculate(2*Math.PI*item*i)
        }
        return side;
    }

    calc_A(side_1, side_2) {
        const pow = 2;
        let A = Math.sqrt(Math.pow(side_1, pow) + Math.pow(side_2, pow));
        return A;
    }

    render_AFC() {
        const div = 'graph1';
        let title = ['A(fn)', 'fn'];
        const header = 'АЧХ разрабатываемого КИХ-фильтра';
        let A_Fn = this.A_Fn();
        let graph = render.massForGraph(A_Fn, title, this.fn);
        render.renderGraph(graph, div, header, title);
        
    }
}

class PFC {
    constructor(b){
        this.b = b;
        this.fn = fn;
    }

    Phi_Fn () {
        let Phi = [];
        this.fn.forEach((item, i) => {
            let side_1 = this.calc_elem(Math.sin, item);
            let side_2 = this.calc_elem(Math.cos, item);

            Phi[i] = this.calc_Phi(side_1, side_2)
        })
        return Phi;
    }

    calc_elem (calculate, item) {
        const iter = 16;
        let side = 0;
        for (let i = 0; i< iter; i++) {
            side += this.b[i] * calculate(2*Math.PI*item*i)
        }
        return side;
        
    }

    calc_Phi(side_1, side_2) {
        let Phi =  Math.atan(side_1 / side_2);
        return Phi;
    }

    render_PFC() {
        const div = 'graph2';
        let title = ['Phi(fn)', 'fn'];
        const header = 'ФЧХ разрабатываемого КИХ-фильтра';
        let Phi_Fn = this.Phi_Fn();
        let graph = render.massForGraph(Phi_Fn, title, this.fn);
        render.renderGraph(graph, div, header, title);
    }

    
}

const f = [300, 500, 700, 900, 1200, 1500, 18000];
const Ampl = [7, 9, 18, 12, 2, 4, 4];
const n = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023];
const k = 1024;

class Signal {
    constructor (f, Ampl, b) {
        this.f = f;
        this.Ampl = Ampl;
        this.b = b;
        this.n = n;
        this.k = k;
    }

    
    calc_fd () {
        let fd = 2 * Math.max.apply(null, this.f);
        return fd;
    }

    calc_td () {
        let td = 1/this.calc_fd();
        return td;
    }

    calc_t_n () {
        
        let t_n = [];
        for (let i = 0; i<this.k; i++) {
            let td = this.calc_td();
            t_n[i] = td*i;
        }
        return t_n;
    }

    
    X_n() {

        let X_n = [];
        let t_n = this.calc_t_n();
        for (let i=0; i<this.k; i++) {
            X_n[i] = this.Signal_generation(t_n[i]);
        }
        return X_n;

    }

    Signal_generation(t_n) {
        let side = 0;
        const iter = 7;
        
        for (let i=0; i<iter; i++) {
            side += this.Ampl[i] * Math.sin(2*Math.PI*this.f[i]*t_n);
        }
        return side;
  
    }

    Z_nj(n, j) {
        let z_nj;
        if (j > n) { z_nj = 0; }
        else { z_nj = n - j; }
        return z_nj;
    }

    Ymc_n() {
        let Ymc_n = [];
        for (let i = 0; i < k; i++) {
            Ymc_n[i] = this.ClearSignal_generation(i)
        }
        return Ymc_n;
    }

    ClearSignal_generation(n) {
        let side = 0;
        const iter = 16;
        let X_n = this.X_n();
        for (let i = 0; i < iter; i++) {
            let item = this.Z_nj(n, i);
            side += this.b[i] * X_n[item];
        }
        return side;
    }

    OutNoise() {
        let delta_Ymc_Xn = [];
        let X_n = this.X_n();
        let Ymc_n = this.Ymc_n();
        for (let i = 0; i < k; i++) {
            delta_Ymc_Xn[i] = X_n[i] - Ymc_n[i];
        }
        return delta_Ymc_Xn;
    }
   
    render_X_n () {
        const div = 'graph3';
        let title = ['X(n)', 'n'];
        const header = 'Исходная форма сигнала';
        let X_n = this.X_n();
        let graph = render.massForGraph(X_n, title, this.n);
        render.renderGraph(graph, div, header, title);
    }

    render_Ymc_n() {
        const div = 'graph4';
        let title = ['Ymc(n)', 'n'];
        const header = 'Очищенная форма исходного сигнала';
        let Ymc_n = this.Ymc_n();
        let graph = render.massForGraph(Ymc_n, title, this.n);
        render.renderGraph(graph, div, header, title);
    }

    render_delta_Ymc_Xn() {
        const div = 'graph5';
        let title = ['DeltaYmcX_n', 'n'];
        const header = 'Отсеянный шум';
        let delta_Ymc_Xn = this.OutNoise();
        let graph = render.massForGraph(delta_Ymc_Xn, title, this.n);
        render.renderGraph(graph, div, header, title);
    }

    render_CombinedSignals() {
        const div = 'graph6';
        let title = ['Xn/Ymcn', 'Xn/Ymcn', 'n'];
        const header = 'Совмещенные формы зашумленного и очищенного сигналов';
        let X_n = this.X_n();
        let Ymc_n = this.Ymc_n();
        let graph = render.massCoupleForGraph(X_n, Ymc_n, title, this.n);
        render.renderGraph(graph, div, header, title);       
    }

    
}




class Render {

    massForGraph(elem, title, arr) {
        let graph = [title]
        arr.forEach((item, i) => {
            graph[i + 1] = [`${item}`, elem[i]];
        })
        return graph;
    }

    massCoupleForGraph(X, Y, title, arr) {
        let graph = [title]
        arr.forEach((item, i) => {
            graph[i + 1] = [`${item}`, X[i], Y[i]];
        })
        return graph;
    }

    renderGraph(graph, div, header, title) {
        function drawChart() {
            var data = google.visualization.arrayToDataTable(graph);

            var options = {
                title: header,
                hAxis: {
                    title: title[1]
                },
                vAxis: {
                    title: title[0]
                },
                curveType: 'function',
                legend: { position: 'bottom' }
            };

            var chart = new google.visualization.LineChart(document.getElementById(div));

            chart.draw(data, options);
        }

        google.charts.load('current', { 'packages': ['corechart'] });
        google.charts.setOnLoadCallback(drawChart);
    }


}



let afc = new AFC(b);
let pfc = new PFC(b);
let signal = new Signal(f, Ampl, b);

let render = new Render();

afc.render_AFC();
pfc.render_PFC();
signal.render_X_n();
signal.render_Ymc_n();
signal.render_delta_Ymc_Xn();
signal.render_CombinedSignals();